
// --- FONT ---
@mixin font{
    font-family: 'Poppins', sans-serif;
    font-weight: 400;
    font-style: normal;
}

@mixin fontMd{
    font-family: 'Poppins', sans-serif;
    font-weight: 500;
    font-style: normal;
}

@mixin fontBd{
    font-family: 'Poppins', sans-serif;
    font-weight: 700;
    font-style: normal;
}


// --- TEXT ---
@mixin h1{
    @include fontBd;
    font-size: $fontXL;
    line-height: $fontXL;
    color: $primary;

    @include media-breakpoint-down(sm) {
        font-size: $fontXL;
        line-height: 1.2;
    }
}


// --- BUTTON ---
@mixin button{
    background-color: $grey;
	display: inline-block;
	padding: calculateRem(10px) calculateRem(30px);
    @include fontBd;
    font-size: $fontS;
    text-align: center;
	text-decoration: none;
	color: $white;
	transition: background-color 0.25s ease;

	.no-touch &:hover{
		background-color: $primary;
	}
}


@mixin absoluteCenter{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate3d(-50%, -50%, 0);
}


// --- STAGGER TRANSITION ---
@mixin stagger($time){
    @for $i from 1 through 30{
        &:nth-child(#{$i}) {
            transition-delay: ($time * $i);
        }
    }
}


// --- CONVERT PX TO REM ---
// Function for converting a px based font-size to rem.
@function calculateRem($size) {
    $remSize: $size / 16px;
    //Default font size on html element is 100%, equivalent to 16px;
    @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin fontSize($size) {
    font-size: $size;
    font-size: calculateRem($size);
}


// --- CLEARFIX ---
@mixin clearfix{
    &:before,
    &:after{
        content:"";
        display:table;
    }
    &:after{
        clear: both;
    }
}


// --- MAIN COLUMN ---
@mixin mainColumn{
    width: 100%;
    max-width: calculateRem(1200px);
    margin: 0 auto;

    @include media-breakpoint-down(lg) {
        padding-left: calculateRem(20px);
        padding-right: calculateRem(20px);
    }
}


// --- EASING ---
@mixin easeInOutCirc($time, $propertie: all){
    -webkit-transition: $propertie $time cubic-bezier(0.785, 0.135, 0.150, 0.860);
    -moz-transition: $propertie $time cubic-bezier(0.785, 0.135, 0.150, 0.860);
    -o-transition: $propertie $time cubic-bezier(0.785, 0.135, 0.150, 0.860);
    transition: $propertie $time cubic-bezier(0.785, 0.135, 0.150, 0.860); /* easeInOutCirc */

    -webkit-transition-timing-function: cubic-bezier(0.785, 0.135, 0.150, 0.860);
    -moz-transition-timing-function: cubic-bezier(0.785, 0.135, 0.150, 0.860);
    -o-transition-timing-function: cubic-bezier(0.785, 0.135, 0.150, 0.860);
    transition-timing-function: cubic-bezier(0.785, 0.135, 0.150, 0.860); /* easeInOutCirc */
}

@mixin easeInOut($time, $propertie: all){
    -webkit-transition: $propertie $time cubic-bezier(0.4, 0.0, 0.2, 1);
    -moz-transition: $propertie $time cubic-bezier(0.4, 0.0, 0.2, 1);
    -o-transition: $propertie $time cubic-bezier(0.4, 0.0, 0.2, 1);
    transition: $propertie $time cubic-bezier(0.4, 0.0, 0.2, 1);

    -webkit-transition-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
    -moz-transition-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
    -o-transition-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
    transition-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
}

 @mixin easeInQuint($time, $propertie: all){
    -webkit-transition: $propertie $time cubic-bezier(0.755, 0.050, 0.855, 0.060); 
    -moz-transition: $propertie $time cubic-bezier(0.755, 0.050, 0.855, 0.060); 
    -o-transition: $propertie $time cubic-bezier(0.755, 0.050, 0.855, 0.060); 
    transition: $propertie $time cubic-bezier(0.755, 0.050, 0.855, 0.060); /* easeInQuint */

    -webkit-transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060); 
    -moz-transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060); 
    -o-transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060); 
    transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060); /* easeInQuint */
}

@mixin easeOut($time, $propertie: all){
    -webkit-transition: $propertie $time cubic-bezier(0.0, 0.0, 0.2, 1);
    -moz-transition: $propertie $time cubic-bezier(0.0, 0.0, 0.2, 1);
    -o-transition: $propertie $time cubic-bezier(0.0, 0.0, 0.2, 1);
    transition: $propertie $time cubic-bezier(0.0, 0.0, 0.2, 1);

    -webkit-transition-timing-function: cubic-bezier(0.0, 0.0, 0.2, 1);
    -moz-transition-timing-function: cubic-bezier(0.0, 0.0, 0.2, 1);
    -o-transition-timing-function: cubic-bezier(0.0, 0.0, 0.2, 1);
    transition-timing-function: cubic-bezier(0.0, 0.0, 0.2, 1);
}

@mixin easeIn($time, $propertie: all){
    -webkit-transition: $propertie $time cubic-bezier(0.4, 0.0, 1, 1);
    -moz-transition: $propertie $time cubic-bezier(0.4, 0.0, 1, 1);
    -o-transition: $propertie $time cubic-bezier(0.4, 0.0, 1, 1);
    transition: $propertie $time cubic-bezier(0.4, 0.0, 1, 1);

    -webkit-transition-timing-function: cubic-bezier(0.4, 0.0, 1, 1);
    -moz-transition-timing-function: cubic-bezier(0.4, 0.0, 1, 1);
    -o-transition-timing-function: cubic-bezier(0.4, 0.0, 1, 1);
    transition-timing-function: cubic-bezier(0.4, 0.0, 1, 1);
}